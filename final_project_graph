import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np

# Sample parsed data for demonstration
game_entries = [
    {
        'timestamp': datetime(2023, 10, 8, 16, 11, 45),
        'questions': [
            {'question': 'english_q_mammoth_45', 'correct_answers': 28, 'attempts': 45},
            {'question': 'english_q_pigeon_36', 'correct_answers': 28, 'attempts': 36},
            {'question': 'english_q_tiger_40', 'correct_answers': 28, 'attempts': 40},
        ]
    },
    {
        'timestamp': datetime(2023, 10, 8, 16, 10, 45),
        'questions': [
            {'question': 'english_q_mammoth_1', 'correct_answers': 1, 'attempts': 1},
            {'question': 'english_q_pigeon_2', 'correct_answers': 1, 'attempts': 2},
            {'question': 'english_q_tiger_1', 'correct_answers': 1, 'attempts': 1},
        ]
    }
]

# Function to generate example graphs based on sample data
def generate_graphs(game_entries):
    # Map question identifiers to user-friendly labels
    question_labels = {
        'english_q_mammoth_1': 'Mammoth Question',
        'english_q_pigeon_2': 'Pigeon Question',
        'english_q_tiger_1': 'Tiger Question',
    }
    
    questions = {}
    for entry in game_entries:
        for q in entry['questions']:
            question_name = q['question']
            if question_name not in questions:
                questions[question_name] = {
                    'attempts': [],
                    'correct_answers': [],
                    'timestamps': []
                }
            questions[question_name]['attempts'].append(q['attempts'])
            questions[question_name]['correct_answers'].append(q['correct_answers'])
            questions[question_name]['timestamps'].append(entry['timestamp'])

    # Example 1: Performance over time for each question
    for question_name, data in questions.items():
        plt.figure(figsize=(10, 5))
        plt.plot(data['timestamps'], data['attempts'], marker='o', label='Attempts')
        plt.plot(data['timestamps'], data['correct_answers'], marker='x', label='Correct Answers')
        plt.title(f"Performance over time for {question_labels.get(question_name, question_name)}")
        plt.xlabel('Timestamp')
        plt.ylabel('Count')
        plt.legend()
        plt.xticks(rotation=45)
        plt.yticks(range(0, max(max(data['attempts']), max(data['correct_answers'])) + 1))
        plt.tight_layout()
        plt.show()

    # Example 2: Average Attempts per Question
    avg_attempts = {question: sum(data['attempts']) / len(data['attempts']) for question, data in questions.items()}
    colors = plt.cm.tab10(np.linspace(0, 1, len(avg_attempts)))

    plt.figure(figsize=(10, 5))
    plt.bar(
        [question_labels.get(q, q) for q in avg_attempts.keys()],
        avg_attempts.values(),
        color=colors
    )
    plt.title('Average Attempts per Question')
    plt.xlabel('Question')
    plt.ylabel('Average Attempts')
    plt.yticks(range(0, int(max(avg_attempts.values())) + 2))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    # Example 3: Total Correct Answers per Question
    total_correct = {question: sum(data['correct_answers']) for question, data in questions.items()}

    plt.figure(figsize=(10, 5))
    plt.bar(
        [question_labels.get(q, q) for q in total_correct.keys()],
        total_correct.values(),
        color=colors
    )
    plt.title('Total Correct Answers per Question')
    plt.xlabel('Question')
    plt.ylabel('Total Correct Answers')
    plt.yticks(range(0, int(max(total_correct.values())) + 2))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Generate the updated example graphs
generate_graphs(game_entries)
